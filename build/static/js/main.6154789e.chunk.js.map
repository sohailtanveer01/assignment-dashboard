{"version":3,"sources":["context/SidebarContext.js","components/ThemedSuspense.js","components/AccessibleNavigationAnnouncer.js","App.js","index.js"],"names":["SidebarContext","React","createContext","SidebarProvider","children","useState","isSidebarOpen","setIsSidebarOpen","toggleSidebar","closeSidebar","value","useMemo","Provider","ThemedSuspense","className","AccessibleNavigationAnnouncer","message","setMessage","location","useLocation","useEffect","pathname","slice","setTimeout","role","aria-live","aria-atomic","Layout","lazy","CreateAccount","ForgotPassword","App","path","component","exact","from","to","ReactDOM","render","fallback","usePreferences","document","getElementById"],"mappings":"wNAGaA,EAAiBC,IAAMC,gBAEvBC,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,oBAAS,GADJ,mBACxCC,EADwC,KACzBC,EADyB,KAG/C,SAASC,IACPD,GAAkBD,GAGpB,SAASG,IACPF,GAAiB,GAGnB,IAAMG,EAAQC,mBACZ,iBAAO,CACLL,gBACAE,gBACAC,kBAEF,CAACH,IAGH,OAAO,kBAACN,EAAeY,SAAhB,CAAyBF,MAAOA,GAAQN,K,gCCzBjD,oBAUeS,IARf,WACE,OACE,yBAAKC,UAAU,6FAAf,gB,kKCoBWC,MArBf,WAA0C,IAAD,EACTV,mBAAS,IADA,mBAChCW,EADgC,KACvBC,EADuB,KAEjCC,EAAWC,cAYjB,OAVAC,qBAAU,WAEJF,EAASG,SAASC,MAAM,GAE1BC,YAAW,kBAAMN,EAAW,gBAAD,OAAiBC,EAASG,SAASC,MAAM,GAAzC,aAAsD,KAEjFL,EAAW,MAEZ,CAACC,IAGF,0BAAMJ,UAAU,UAAUU,KAAK,SAASC,YAAU,SAASC,cAAY,QACpEV,ICfDW,EAASC,gBAAK,kBAAM,wDAEpBC,GADQD,gBAAK,kBAAM,wDACHA,gBAAK,kBAAM,yDAC3BE,EAAiBF,gBAAK,kBAAM,kCAsBnBG,MApBf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,kBAAkBC,UAAWJ,IACzC,kBAAC,IAAD,CAAOG,KAAK,mBAAmBC,UAAWH,IAG1C,kBAAC,IAAD,CAAOE,KAAK,OAAOC,UAAWN,IAE9B,kBAAC,IAAD,CAAUO,OAAK,EAACC,KAAK,IAAIC,GAAG,uB,wBCRtCC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC1B,EAAA,EAAD,OAClB,kBAAC,WAAD,CAAU2B,gBAAc,GACtB,kBAAC,EAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.6154789e.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\r\n\r\n// create context\r\nexport const SidebarContext = React.createContext()\r\n\r\nexport const SidebarProvider = ({ children }) => {\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\r\n\r\n  function toggleSidebar() {\r\n    setIsSidebarOpen(!isSidebarOpen)\r\n  }\r\n\r\n  function closeSidebar() {\r\n    setIsSidebarOpen(false)\r\n  }\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      isSidebarOpen,\r\n      toggleSidebar,\r\n      closeSidebar,\r\n    }),\r\n    [isSidebarOpen]\r\n  )\r\n\r\n  return <SidebarContext.Provider value={value}>{children}</SidebarContext.Provider>\r\n}\r\n","import React from 'react'\r\n\r\nfunction ThemedSuspense() {\r\n  return (\r\n    <div className=\"w-full h-screen p-6 text-lg font-medium text-gray-600 dark:text-gray-400 dark:bg-gray-900\">\r\n      Loading...\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ThemedSuspense\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nfunction AccessibleNavigationAnnouncer() {\r\n  const [message, setMessage] = useState('')\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    // ignore the /\r\n    if (location.pathname.slice(1)) {\r\n      // make sure navigation has occurred and screen reader is ready\r\n      setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\r\n    } else {\r\n      setMessage('')\r\n    }\r\n  }, [location])\r\n\r\n  return (\r\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\r\n      {message}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default AccessibleNavigationAnnouncer\r\n","import React, { lazy } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\r\n\r\nconst Layout = lazy(() => import('./containers/Layout'))\r\nconst Login = lazy(() => import('./pages/Login'))\r\nconst CreateAccount = lazy(() => import('./pages/CreateAccount'))\r\nconst ForgotPassword = lazy(() => import('./pages/ForgotPassword'))\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <AccessibleNavigationAnnouncer />\r\n        <Switch>\r\n          {/* <Route path=\"/login\" component={Login} /> */}\r\n          <Route path=\"/create-account\" component={CreateAccount} />\r\n          <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n\r\n          {/* Place new routes over this */}\r\n          <Route path=\"/app\" component={Layout} />\r\n          {/* If you have an index page, you can remothis Redirect */}\r\n          <Redirect exact from=\"/\" to=\"/app/dashboard\" />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React, { Suspense } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './assets/css/tailwind.output.css'\r\nimport App from './App'\r\nimport { SidebarProvider } from './context/SidebarContext'\r\nimport ThemedSuspense from './components/ThemedSuspense'\r\nimport { Windmill } from '@windmill/react-ui'\r\n// import * as serviceWorker from './serviceWorker'\r\n\r\n// if (process.env.NODE_ENV !== 'production') {\r\n//   const axe = require('react-axe')\r\n//   axe(React, ReactDOM, 1000)\r\n// }\r\n\r\nReactDOM.render(\r\n  <SidebarProvider>\r\n    <Suspense fallback={<ThemedSuspense />}>\r\n      <Windmill usePreferences>\r\n        <App />\r\n      </Windmill>\r\n    </Suspense>\r\n  </SidebarProvider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.register()\r\n"],"sourceRoot":""}